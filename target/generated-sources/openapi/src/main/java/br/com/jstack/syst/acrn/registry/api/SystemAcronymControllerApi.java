/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package br.com.jstack.syst.acrn.registry.api;

import br.com.jstack.syst.acrn.registry.model.SystemAcronymErrorResponse;
import br.com.jstack.syst.acrn.registry.model.SystemAcronymRequest;
import br.com.jstack.syst.acrn.registry.model.SystemAcronymResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-27T21:24:08.809116-03:00[America/Sao_Paulo]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "SystemAcronymController", description = "the SystemAcronymController API")
public interface SystemAcronymControllerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /v1/system-acronyms : Create a system acronym
     *
     * @param systemAcronymRequest  (required)
     * @return Created (status code 201)
     *         or Bad Request (status code 400)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "createSystemAcronym",
        summary = "Create a system acronym",
        tags = { "SystemAcronymController" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/v1/system-acronyms",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> _createSystemAcronym(
        @Parameter(name = "SystemAcronymRequest", description = "", required = true) @Valid @RequestBody SystemAcronymRequest systemAcronymRequest
    ) {
        return createSystemAcronym(systemAcronymRequest);
    }

    // Override this method
    default  ResponseEntity<Void> createSystemAcronym(SystemAcronymRequest systemAcronymRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /v1/system-acronyms/{id} : Soft delete a system acronym
     *
     * @param id  (required)
     * @return Deleted (status code 204)
     *         or Not Found (status code 404)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "deleteSystemAcronym",
        summary = "Soft delete a system acronym",
        tags = { "SystemAcronymController" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Deleted"),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/v1/system-acronyms/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Void> _deleteSystemAcronym(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return deleteSystemAcronym(id);
    }

    // Override this method
    default  ResponseEntity<Void> deleteSystemAcronym(Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/system-acronyms/{id} : Get system acronym by ID
     *
     * @param id  (required)
     * @return System acronym details (status code 200)
     *         or Not Found (status code 404)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "getSystemAcronym",
        summary = "Get system acronym by ID",
        tags = { "SystemAcronymController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "System acronym details", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/system-acronyms/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SystemAcronymResponse> _getSystemAcronym(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return getSystemAcronym(id);
    }

    // Override this method
    default  ResponseEntity<SystemAcronymResponse> getSystemAcronym(Integer id) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"product_owner_name\" : \"product_owner_name\", \"acronym\" : \"acronym\", \"owner_user_id\" : 1, \"type_id\" : 6, \"has_personal_data\" : true, \"description\" : \"description\", \"active\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"go_live_date\" : \"2000-01-23\", \"documentation_url\" : \"documentation_url\", \"created_by\" : \"created_by\", \"contact_email\" : \"contact_email\", \"security_level\" : \"security_level\", \"domain_id\" : 0, \"compliance_requirements\" : \"compliance_requirements\", \"dev_team_id\" : 5, \"critical_for_operation\" : true, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"updated_by\" : \"updated_by\", \"lifecycle_status\" : \"lifecycle_status\", \"sunset_date\" : \"2000-01-23\", \"id\" : 2, \"biz_team_id\" : 5 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /v1/system-acronyms : List system acronyms
     *
     * @param active  (optional)
     * @param typeId  (optional)
     * @param domainId  (optional)
     * @return List of system acronyms (status code 200)
     *         or Unauthorized (status code 401)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "listSystemAcronyms",
        summary = "List system acronyms",
        tags = { "SystemAcronymController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of system acronyms", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = SystemAcronymResponse.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Unauthorized", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/v1/system-acronyms",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<SystemAcronymResponse>> _listSystemAcronyms(
        @Parameter(name = "active", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "active", required = false) @Nullable Boolean active,
        @Parameter(name = "typeId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "typeId", required = false) @Nullable Integer typeId,
        @Parameter(name = "domainId", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "domainId", required = false) @Nullable Integer domainId
    ) {
        return listSystemAcronyms(active, typeId, domainId);
    }

    // Override this method
    default  ResponseEntity<List<SystemAcronymResponse>> listSystemAcronyms(Boolean active, Integer typeId, Integer domainId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"product_owner_name\" : \"product_owner_name\", \"acronym\" : \"acronym\", \"owner_user_id\" : 1, \"type_id\" : 6, \"has_personal_data\" : true, \"description\" : \"description\", \"active\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"go_live_date\" : \"2000-01-23\", \"documentation_url\" : \"documentation_url\", \"created_by\" : \"created_by\", \"contact_email\" : \"contact_email\", \"security_level\" : \"security_level\", \"domain_id\" : 0, \"compliance_requirements\" : \"compliance_requirements\", \"dev_team_id\" : 5, \"critical_for_operation\" : true, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"updated_by\" : \"updated_by\", \"lifecycle_status\" : \"lifecycle_status\", \"sunset_date\" : \"2000-01-23\", \"id\" : 2, \"biz_team_id\" : 5 }, { \"product_owner_name\" : \"product_owner_name\", \"acronym\" : \"acronym\", \"owner_user_id\" : 1, \"type_id\" : 6, \"has_personal_data\" : true, \"description\" : \"description\", \"active\" : true, \"created_at\" : \"2000-01-23T04:56:07.000+00:00\", \"go_live_date\" : \"2000-01-23\", \"documentation_url\" : \"documentation_url\", \"created_by\" : \"created_by\", \"contact_email\" : \"contact_email\", \"security_level\" : \"security_level\", \"domain_id\" : 0, \"compliance_requirements\" : \"compliance_requirements\", \"dev_team_id\" : 5, \"critical_for_operation\" : true, \"updated_at\" : \"2000-01-23T04:56:07.000+00:00\", \"name\" : \"name\", \"updated_by\" : \"updated_by\", \"lifecycle_status\" : \"lifecycle_status\", \"sunset_date\" : \"2000-01-23\", \"id\" : 2, \"biz_team_id\" : 5 } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /v1/system-acronyms/{id} : Update system acronym
     *
     * @param id  (required)
     * @param systemAcronymRequest  (required)
     * @return Updated successfully (status code 200)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Internal Server Error (status code 500)
     */
    @Operation(
        operationId = "updateSystemAcronym",
        summary = "Update system acronym",
        tags = { "SystemAcronymController" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Updated successfully"),
            @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            }),
            @ApiResponse(responseCode = "500", description = "Internal Server Error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SystemAcronymErrorResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/v1/system-acronyms/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> _updateSystemAcronym(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "SystemAcronymRequest", description = "", required = true) @Valid @RequestBody SystemAcronymRequest systemAcronymRequest
    ) {
        return updateSystemAcronym(id, systemAcronymRequest);
    }

    // Override this method
    default  ResponseEntity<Void> updateSystemAcronym(Integer id, SystemAcronymRequest systemAcronymRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"path\" : \"/v1/system-acronyms\", \"error\" : \"Bad Request\", \"message\" : \"Invalid input data\", \"timestamp\" : \"2025-06-25T12:34:56Z\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
